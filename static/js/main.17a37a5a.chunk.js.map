{"version":3,"sources":["Intro.js","../../src/index.js","../../src/utils.js","demoData.js","Demo.js","Docs.js","App.js","index.js","logo.png"],"names":["className","src","logo","style","height","marginBottom","alt","href","initialList","useState","list","set","l","index","updateFn","copy","item","updateAt","defaultList","task","done","mergeBeforeList","mergeAfterList","useArray","empty","push","filter","removeAt","map","reverse","mergeBefore","mergeAfter","id","target","rel","onClick","Date","getTime","key","App","Intro","Demo","Docs","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.17a37a5a.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.png';\n\nexport default () =>\n  <div className='card'>\n    <img src={logo} style={{ height: 96, marginBottom: 12 }} alt='' />\n    <img src='https://img.shields.io/npm/v/use-array.svg' alt='' />\n    <h1>react-use-array</h1>\n    <p>A custom React hook that lets you <mark>manipulate an array data structure</mark> without ever needing extra utilities. Start with:</p>\n    <p><code>npm install --save react-use-array</code></p>\n    <p>Then, import and use the hook:</p>\n    <pre>\n      {`import useArray from 'react-use-array'\\n`}\n      {`// ‚Ä¶in your functional component: \\n`}\n      {`const [ list, {\\n`}\n      {`  set, empty, replace, push,\\n`}\n      {`  updateAt, setAt, removeAt,\\n`}\n      {`  filter, map, sort, reverse, \\n`}\n      {`  mergeBefore, mergeAfter, \\n`}\n      {`}] = useArray(defaultList);`}\n    </pre>\n    <p>Now, let‚Äôs go over each of the methods. You can also skip ahead <mark><a href='#docs'>to the docs</a></mark> or <mark><a href='#demo'>the demo.</a></mark></p>\n  </div>;\n","import { useState } from 'react';\nimport { updateAt } from './utils';\n\nconst useArray = (initialList) => {\n  const [list, set] = useState(initialList);\n  return [\n    list,\n    {\n      set,\n      empty: () => set([]),\n      replace: (list) => set(list),\n      push: (item) => set(l => [...l, item]),\n      updateAt: (index, updateFn) => updateAt(index, updateFn, set),\n      setAt: (index, value) => set(l =>\n        [...l.slice(0, index), value, ...l.slice(index + 1)]\n      ),\n      removeAt: (index) => set(l => [...l.slice(0, index), ...l.slice(index + 1)]),\n      filter: (filterFn) => set(l => l.filter(filterFn)),\n      map: (mapFn) => set(l => [...l].map(mapFn)),\n      sort: (sortFn) => set(l => [...l].sort(sortFn)),\n      reverse: () => set(l => [...l].reverse()),\n      mergeBefore: (arr) => set(l => [...arr].concat([...l])),\n      mergeAfter: (arr) => set(l => [...l].concat([...arr])),\n    }\n  ];\n}\n\nexport default useArray;\n","export const updateAt = (index, updateFn, set) =>\n  set(l => {\n    const copy = l.slice(0);\n    const item = copy[index];\n    copy[index] = updateFn(item);\n    return copy;\n  });\n","import React from 'react'\n\nexport const defaultList = [\n  { task: <span>Check the <mark>react-use-array</mark> demo</span>, done: true },\n  { task: <span>Install with <code>npm install --save react-use-array</code> and then import as <code>{`import useArray from 'react-use-array'`}</code></span>, done: false },\n  { task: 'Follow the example and docs! üéâ üéâ üéâ', done: false },\n];\n\nexport const getTask = () => ({\n  done: false,\n  task: 'Your new task. Timestamp: ' + new Date().getTime()\n});\n\nexport const mergeBeforeList = [\n  { task: <span>Added with <code>mergeBefore</code></span>, done: false },\n];\n\nexport const mergeAfterList = [\n  { task: <span>Added with <code>mergeAfter</code></span>, done: false },\n];\n","import React from 'react';\nimport useArray from 'react-use-array';\nimport { defaultList, getTask, mergeBeforeList, mergeAfterList } from './demoData';\n\nexport default () => {\n  const [\n    list,\n    { empty, push, updateAt, filter, removeAt, map, reverse, mergeBefore, mergeAfter }\n  ] = useArray(defaultList);\n\n  return (\n    <div id='demo'>\n      <div className='buttons'>\n        <h2>Demo</h2>\n        <p>\n          All of the code is{' '}\n          <a\n            href='https://github.com/hoodhub/react-use-array/blob/master/example/src/Demo.js'\n            target='_blank'\n            rel='noopener noreferrer'\n          >available on Github.\n          </a>\n        </p>\n        <button onClick={() => filter(item => !item.done)}>\n          Remove completed\n        </button>\n        <button onClick={empty}>\n          Remove all\n        </button>\n        <button onClick={() => push(getTask())}>\n          Add task\n        </button>\n        <button onClick={() => map(item => ({...item, done: !item.done}))}>\n          Toggle ‚Äúdone‚Äù\n        </button>\n        <button onClick={reverse}>\n          Reverse\n        </button>\n        <button onClick={() => mergeBefore(mergeBeforeList)}>\n          Merge before\n        </button>\n        <button onClick={() => mergeAfter(mergeAfterList)}>\n          Merge after\n        </button>\n      </div>\n      {list.map((item, index) =>\n        <div\n          key={index}\n          className={'card ' + (item.done ? 'card--done' : '')}\n        >\n          <p>{item.task}</p>\n          <button\n            onClick={() => updateAt(index, item => ({...item, done: !item.done}))}\n          >\n            {item.done ? '‚Ü©Ô∏è Undo' : '‚úÖ Done'}\n          </button>\n          <button\n            onClick={() => removeAt(index)}\n          >\n            ‚ùå Delete\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default () =>\n  <div id='docs'>\n    <div className='buttons'>\n      <h2>Method Docs</h2>\n    </div>\n    <div className='card'>\n      <h3>empty</h3>\n      <p><code>empty</code> will reset the state to an <mark>empty array.</mark></p>\n      <pre>{`empty()`}</pre>\n      <h3>replace / set</h3>\n      <p><code>replace</code> and <code>set</code> are the same, they are called with one parameter: the <mark>new array</mark> for the state.</p>\n      <pre>\n        {`replace(newList) \\n`}\n        {`// or: \\n`}\n        {`set(newList)`}\n      </pre>\n      <h3>push</h3>\n      <p><code>push</code> should be familiar ‚Äì provide an <mark>item</mark> as the argument and it will be pushed to the state.</p>\n      <pre>{`push(item)`}</pre>\n      <h3>updateAt</h3>\n      <p><code>updateAt</code> takes two parameters: <mark>the index</mark> and an <mark>update function</mark> which will be called with the item at the given index.</p>\n      <pre>\n        {`updateAt(index, (item) =>\\n`}\n        {`  ({ ...item, done: true }));`}\n      </pre>\n      <h3>setAt</h3>\n      <p><code>setAt</code> takes two parameters: <mark>the index</mark> and an <mark>item</mark> which will be placed at the given index.</p>\n      <pre>\n        {`setAt(index, item)`}\n      </pre>\n      <h3>removeAt</h3>\n      <p><code>removeAt</code> takes <mark>the index</mark> of the item that should be removed as a parameter.</p>\n      <pre>\n        {`removeAt(index)`}\n      </pre>\n      <h3>filter</h3>\n      <p><code>filter</code> takes a <mark>filter function (predicate)</mark> as the parameter, just like <code>{`Array‚Äã.prototype‚Äã.filter()`}</code></p>\n      <pre>\n        {`filter((item) => item.done === false)`}\n      </pre>\n      <h3>map</h3>\n      <p><code>map</code> takes a <mark>map function</mark> as the parameter, just like <code>{`Array‚Äã.prototype‚Äã.map()`}</code></p>\n      <pre>\n        {`map((item) => \\n`}\n        {`  ({ ...item, updatedAt: new Date().getTime() })\\n`}\n        {`)`}\n      </pre>\n      <h3>sort</h3>\n      <p><code>sort</code> takes an <mark>optional sort function</mark> as the parameter, just like <code>{`Array‚Äã.prototype‚Äã.sort()`}</code></p>\n      <pre>\n        {`sort((a, b) => a.localeCompare(b))`}\n      </pre>\n      <h3>reverse</h3>\n      <p><code>reverse</code> works just like <code>{`Array‚Äã.prototype‚Äã.reverse()`}</code></p>\n      <pre>\n        {`reverse()`}\n      </pre>\n    </div>\n  </div>;\n","import React from 'react';\nimport Intro from './Intro';\nimport Demo from './Demo';\nimport Docs from './Docs';\n\nconst App = () =>\n  <div>\n    <Intro />\n    <Demo />\n    <Docs />\n  </div>;\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","module.exports = __webpack_public_path__ + \"static/media/logo.74487bb9.png\";"],"sourceRoot":""}